<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Callable、Future与FutureTask.md</title>
      <link href="/2020/04/22/Callable%E3%80%81Future%E4%B8%8EFutureTask-md/"/>
      <url>/2020/04/22/Callable%E3%80%81Future%E4%B8%8EFutureTask-md/</url>
      
        <content type="html"><![CDATA[<p>通常来说，我们使用<code>Runnable</code>和<code>Thread</code>来创建一个新的线程，但是它们是没有返回值的。而有时候我们希望开启一个线程去执行一个任务，并且这个任务执行完成后有一个返回值。</p><a id="more"></a><p>通常来说，我们使用<code>Runnable</code>和<code>Thread</code>来创建一个新的线程，但是它们是没有返回值的。而有时候我们希望开启一个线程去执行一个任务，并且这个任务执行完成后有一个返回值。</p><p>那么JDK提供了<code>Callable</code>接口与<code>Future</code>类为我们解决这个问题，这也是所谓的“异步”模型。</p><h5 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h5><p>可以看到<code>Callable</code>是一个函数式接口。同时<code>Callable</code>是有返回值的，并且支持泛型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Callable&lt;V&gt; &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Computes a result, or throws an exception if unable to do so.</span><br><span class="line">     *</span><br><span class="line">     * @return computed result</span><br><span class="line">     * @throws Exception if unable to compute a result</span><br><span class="line">     *&#x2F;</span><br><span class="line">    V call() throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那一般是怎么使用Callable的呢？Callable一般是配合线程池工具ExecutorService来使用的。这里举例介绍ExecutorService可以使用submit方法来让一个Callable接口执行。它会返回一个Future，我们后续的程序可以通过这个Future的get方法得到结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Task implements Callable &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String call() throws Exception &#123;</span><br><span class="line">        return &quot;call()方法&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        ExecutorService executorService &#x3D; Executors.newFixedThreadPool(2);</span><br><span class="line">        Task task &#x3D; new Task();</span><br><span class="line">        Future&lt;String&gt; submit &#x3D; executorService.submit(task);</span><br><span class="line">        System.out.println(submit.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<code>call()方法</code></p><h5 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h5><p><code>Future</code>和<code>Callable</code>有着类似的地方，同样也是支持泛型和有返回结果。<br><code>Future</code>接口只有几个比较简单的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public interface Future&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Attempts to cancel execution of this task.  This attempt will</span><br><span class="line">     * fail if the task has already completed, has already been cancelled,</span><br><span class="line">     * or could not be cancelled for some other reason. If successful,</span><br><span class="line">     * and this task has not started when &#123;@code cancel&#125; is called,</span><br><span class="line">     * this task should never run.  If the task has already started,</span><br><span class="line">     * then the &#123;@code mayInterruptIfRunning&#125; parameter determines</span><br><span class="line">     * whether the thread executing this task should be interrupted in</span><br><span class="line">     * an attempt to stop the task.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;After this method returns, subsequent calls to &#123;@link #isDone&#125; will</span><br><span class="line">     * always return &#123;@code true&#125;.  Subsequent calls to &#123;@link #isCancelled&#125;</span><br><span class="line">     * will always return &#123;@code true&#125; if this method returned &#123;@code true&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @param mayInterruptIfRunning &#123;@code true&#125; if the thread executing this</span><br><span class="line">     * task should be interrupted; otherwise, in-progress tasks are allowed</span><br><span class="line">     * to complete</span><br><span class="line">     * @return &#123;@code false&#125; if the task could not be cancelled,</span><br><span class="line">     * typically because it has already completed normally;</span><br><span class="line">     * &#123;@code true&#125; otherwise</span><br><span class="line">     *&#x2F;</span><br><span class="line">    boolean cancel(boolean mayInterruptIfRunning);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Returns &#123;@code true&#125; if this task was cancelled before it completed</span><br><span class="line">     * normally.</span><br><span class="line">     *</span><br><span class="line">     * @return &#123;@code true&#125; if this task was cancelled before it completed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    boolean isCancelled();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Returns &#123;@code true&#125; if this task completed.</span><br><span class="line">     *</span><br><span class="line">     * Completion may be due to normal termination, an exception, or</span><br><span class="line">     * cancellation -- in all of these cases, this method will return</span><br><span class="line">     * &#123;@code true&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @return &#123;@code true&#125; if this task completed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    boolean isDone();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Waits if necessary for the computation to complete, and then</span><br><span class="line">     * retrieves its result.</span><br><span class="line">     *</span><br><span class="line">     * @return the computed result</span><br><span class="line">     * @throws CancellationException if the computation was cancelled</span><br><span class="line">     * @throws ExecutionException if the computation threw an</span><br><span class="line">     * exception</span><br><span class="line">     * @throws InterruptedException if the current thread was interrupted</span><br><span class="line">     * while waiting</span><br><span class="line">     *&#x2F;</span><br><span class="line">    V get() throws InterruptedException, ExecutionException;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Waits if necessary for at most the given time for the computation</span><br><span class="line">     * to complete, and then retrieves its result, if available.</span><br><span class="line">     *</span><br><span class="line">     * @param timeout the maximum time to wait</span><br><span class="line">     * @param unit the time unit of the timeout argument</span><br><span class="line">     * @return the computed result</span><br><span class="line">     * @throws CancellationException if the computation was cancelled</span><br><span class="line">     * @throws ExecutionException if the computation threw an</span><br><span class="line">     * exception</span><br><span class="line">     * @throws InterruptedException if the current thread was interrupted</span><br><span class="line">     * while waiting</span><br><span class="line">     * @throws TimeoutException if the wait timed out</span><br><span class="line">     *&#x2F;</span><br><span class="line">    V get(long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>cancel()</code>注意是试图取消，并不一定能取消成功。因为任务可能已完成、已取消、或者一些其它因素不能取消，存在取消失败的可能。boolean类型的返回值是“是否取消成功”的意思。参数paramBoolean表示是否采用中断的方式取消线程执行。</li></ul><h5 id="FutureTask类"><a href="#FutureTask类" class="headerlink" title="FutureTask类"></a>FutureTask类</h5><p><code>FutureTask</code>的几个状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * The run state of this task, initially NEW.  The run state</span><br><span class="line">    * transitions to a terminal state only in methods set,</span><br><span class="line">    * setException, and cancel.  During completion, state may take on</span><br><span class="line">    * transient values of COMPLETING (while outcome is being set) or</span><br><span class="line">    * INTERRUPTING (only while interrupting the runner to satisfy a</span><br><span class="line">    * cancel(true)). Transitions from these intermediate to final</span><br><span class="line">    * states use cheaper ordered&#x2F;lazy writes because values are unique</span><br><span class="line">    * and cannot be further modified.</span><br><span class="line">    *</span><br><span class="line">    * Possible state transitions:</span><br><span class="line">    * NEW -&gt; COMPLETING -&gt; NORMAL</span><br><span class="line">    * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span><br><span class="line">    * NEW -&gt; CANCELLED</span><br><span class="line">    * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span><br><span class="line">    *&#x2F;</span><br><span class="line">private volatile int state;</span><br><span class="line">private static final int NEW          &#x3D; 0;</span><br><span class="line">private static final int COMPLETING   &#x3D; 1;</span><br><span class="line">private static final int NORMAL       &#x3D; 2;</span><br><span class="line">private static final int EXCEPTIONAL  &#x3D; 3;</span><br><span class="line">private static final int CANCELLED    &#x3D; 4;</span><br><span class="line">private static final int INTERRUPTING &#x3D; 5;</span><br><span class="line">private static final int INTERRUPTED  &#x3D; 6;</span><br></pre></td></tr></table></figure><ul><li>先看一下<code>FutureTask</code>类</li></ul><p>可以看到<code>FutureTask</code>是实现了<code>RunnableFuture</code>接口的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>再看一下<code>RunnableFuture</code>接口</li></ul><p>可以看到<code>RunnableFuture</code>接口同时继承了<code>Runnable</code>接口和<code>Future</code>接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * A &#123;@link Future&#125; that is &#123;@link Runnable&#125;. Successful execution of</span><br><span class="line"> * the &#123;@code run&#125; method causes completion of the &#123;@code Future&#125;</span><br><span class="line"> * and allows access to its results.</span><br><span class="line"> * @see FutureTask</span><br><span class="line"> * @see Executor</span><br><span class="line"> * @since 1.6</span><br><span class="line"> * @author Doug Lea</span><br><span class="line"> * @param &lt;V&gt; The result type returned by this Future&#39;s &#123;@code get&#125; method</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Sets this Future to the result of its computation</span><br><span class="line">     * unless it has been cancelled.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>那FutureTask类有什么用？为什么要有一个FutureTask类？前面说到了Future只是一个接口，而它里面的cancel，get，isDone等方法要自己实现起来都是非常复杂的。所以JDK提供了一个FutureTask类来供我们使用。</p></li><li><p>修改一下上面的代码，改用<code>FutureTask</code></p></li></ul><p>使用上与第一个Demo有一点小的区别。首先，调用submit方法是没有返回值的。这里实际上是调用的submit(Runnable task)方法，而上面的Demo，调用的是submit(Callable<T> task)方法。</p><p>然后，这里是使用FutureTask直接取get取值，而上面的Demo是通过submit方法返回的Future去取值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Task implements Callable &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String call() throws Exception &#123;</span><br><span class="line">        return &quot;call()方法&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        ExecutorService executorService &#x3D; Executors.newFixedThreadPool(2);</span><br><span class="line">        FutureTask futureTask &#x3D; new FutureTask(new Task());</span><br><span class="line">        executorService.submit(futureTask);</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java多线程进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java，多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread类和Runnable接口.md</title>
      <link href="/2020/04/22/Thread%E7%B1%BB%E5%92%8CRunnable%E6%8E%A5%E5%8F%A3-md/"/>
      <url>/2020/04/22/Thread%E7%B1%BB%E5%92%8CRunnable%E6%8E%A5%E5%8F%A3-md/</url>
      
        <content type="html"><![CDATA[<p>如果我们需要有一个“线程”类，JDK提供了<code>Thread</code>类和<code>Runnalble</code>接口来让我们实现自己的“线程”类。继承Thread类，并重写run方法（注意：Thread类实现了Runnable接口），实现Runnable接口的run方法。</p><a id="more"></a><p>如果我们需要有一个“线程”类，JDK提供了<code>Thread</code>类和<code>Runnalble</code>接口来让我们实现自己的“线程”类。</p><ul><li>继承Thread类，并重写run方法（注意：Thread类实现了Runnable接口）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Thread implements Runnable &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>实现Runnable接口的run方法</li></ul><h5 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static class MyThread extends Thread &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(&quot;MyThread&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Thread t1 &#x3D; new MyThread();</span><br><span class="line">t1.start();</span><br><span class="line">System.out.println(t1.getName() + &quot;运行结束&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>start()</code>方法启动一个线程，注意不能多次调用<code>start()</code>方法，否则会抛出异常。</p><h5 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static class MyThread1 implements Runnable &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(&quot;MyThread1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new Thread(new MyThread1()).start();</span><br><span class="line">System.out.println(&quot;运行结束&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Thread类的几个常用方法"><a href="#Thread类的几个常用方法" class="headerlink" title="Thread类的几个常用方法"></a>Thread类的几个常用方法</h5><ul><li><code>currentThread()</code>：静态方法，返回对当前正在执行的线程对象的引用</li></ul><p>该方法可以可以返回代码段正在被哪个线程调用的信息。实例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果会在控制台打印<code>main</code>，证明main方法正在被名字叫main的线程调用。<br>修改代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static class MyThread extends Thread &#123;</span><br><span class="line"></span><br><span class="line">public MyThread() &#123;</span><br><span class="line">System.out.println(&quot;构造方法打印：&quot; + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(&quot;run方法打印：&quot; + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Thread t1 &#x3D; new MyThread();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下，证明构造函数是被main线程调用的，而<code>run()</code>方法是被名叫“Thread-0”调用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法打印：main</span><br><span class="line">run方法打印：Thread-0</span><br></pre></td></tr></table></figure><p>再次修改代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">static class MyThread extends Thread &#123;</span><br><span class="line"></span><br><span class="line">public MyThread() &#123;</span><br><span class="line">System.out.println(&quot;构造方法打印：&quot; + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(&quot;run方法打印：&quot; + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class MyThread1 implements Runnable &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(&quot;MyThread1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Thread t1 &#x3D; new MyThread();</span><br><span class="line">&#x2F;&#x2F; t1.start();</span><br><span class="line">t1.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下，证明两个线程都是被main调用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法打印：main</span><br><span class="line">run方法打印：main</span><br></pre></td></tr></table></figure><ul><li><code>isAlive()</code>方法：是判断当前线程是不是出于活动状态</li><li><code>sleep()</code>方法：静态方法，使当前线程睡眠一段时间</li><li><code>start()</code>：开始执行线程的方法，java虚拟机会调用线程内的run()方法</li><li><code>yield()</code>：yield在英语里有放弃的意思，同样，这里的yield()指的是当前线程愿意让出对当前处理器的占用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static class MyThread extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        long beginTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 5000000; i++) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            count &#x3D; count + (i + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        long endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;用时：&quot; + (endTime - beginTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Thread t1 &#x3D; new MyThread();</span><br><span class="line">    t1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>Thread.yield();</code>这句代码被注释掉之后，输出结果为<code>用时：4</code>。 当<code>Thread.yield();</code>这句代码没有被注释掉之后，输出结果为<code>用时：1515</code>。所以证明<code>yield()</code>方法会放弃当前资源，将CPU让给其他资源做事情，所以导致速度变慢。</p><ul><li><code>Thread.stop()</code>：暴力停止线程， 不推荐这么做。</li><li><code>Thread.interrupt()</code>：推荐使用此方法。此方法是在当前线程中打印一个停止的标记，并不是真正的停止线程。<ul><li>this.interrupted()，测试当前线程是否已经中断，执行后具有将状态标志清除为false的功能</li><li>this.isInterrupted()，测试线程Thread对象是否已经是中断状态，但不会清除状态标志</li></ul></li></ul><h5 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h5><p>User Thread（用户线程）和Daemon Thread（守护线程）从本质上来说并没有什么区别，唯一的不同之处就在于虚拟机的离开：如果用户线程已经全部退出运行了，只剩下守护线程存在了，虚拟机也就退出了。 因为没有了被守护者，守护线程也就没有工作可做了，也就没有继续运行程序的必要了。</p><h5 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h5><p>首先看下JDK对线程优先级的设置有哪些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line">  * The minimum priority that a thread can have.</span><br><span class="line">  *&#x2F;</span><br><span class="line"> public final static int MIN_PRIORITY &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">  * The default priority that is assigned to a thread.</span><br><span class="line">  *&#x2F;</span><br><span class="line"> public final static int NORM_PRIORITY &#x3D; 5;</span><br><span class="line"></span><br><span class="line"> &#x2F;**</span><br><span class="line">  * The maximum priority that a thread can have.</span><br><span class="line">  *&#x2F;</span><br><span class="line"> public final static int MAX_PRIORITY &#x3D; 10;</span><br></pre></td></tr></table></figure><p>那么JDK是通过什么方法设置线程的优先级呢？答案是通过<code>setPriority(int newPriority)</code>这个方法设置优先级，参数<code>newPriority</code>越大，优先级越高。但是需要注意的是优先级虽然高，占得CPU资源较多，但是也不能保证优先级高的线程全部执行完，因为<code>优先级具有随机性</code>。</p><h5 id="Thread类与Runnable接口的比较"><a href="#Thread类与Runnable接口的比较" class="headerlink" title="Thread类与Runnable接口的比较"></a>Thread类与Runnable接口的比较</h5><p>实现一个自定义的线程类，可以有继承Thread类或者实现Runnable接口这两种方式，它们之间有什么优劣呢？</p><ul><li>由于Java“单继承，多实现”的特性，Runnable接口使用起来比Thread更灵活。</li><li>Runnable接口出现更符合面向对象，将线程单独进行对象的封装。</li><li>Runnable接口出现，降低了线程对象和线程任务的耦合性。</li><li>如果使用线程时不需要使用Thread类的诸多方法，显然使用Runnable接口更为轻量。</li></ul><p>所以，我们通常优先使用“实现Runnable接口”这种方式来自定义线程类。</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><ul><li><a href="https://www.cnblogs.com/yanggb/p/11702843.html" target="_blank" rel="noopener">Java中的守护线程</a></li><li>《Java多线程编程核心技术》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java多线程进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java，多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程与线程的基本概念</title>
      <link href="/2020/04/22/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/04/22/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h5 id="进程产生的背景"><a href="#进程产生的背景" class="headerlink" title="进程产生的背景"></a>进程产生的背景</h5><p>进程产生的背景：最初的计算机只能接受一些特定的指令，用户每输入一个指令，计算机就做出一个操作。当用户在思考或者输入时，计算机就在等待。这样效率非常低下，在很多时候，计算机都处在等待状态。</p><a id="more"></a><p>最初的计算机只能接受一些特定的指令，用户每输入一个指令，计算机就做出一个操作。当用户在思考或者输入时，计算机就在等待。这样效率非常低下，在很多时候，计算机都处在等待状态。</p><ul><li>批处理操作系统</li></ul><p>后来有了批处理操作体统,把一系列需要操作的指令写下来，形成一个清单，一次性交给计算机。用户将多个需要执行的程序写在磁带上，然后交由计算机去读取并逐个执行这些程序，并将输出结果写在另一个磁带上。</p><p>批处理操作系统在一定程度上提高了计算机的效率，但是由于批处理操作系统的指令运行方式仍然是串行的，内存中始终只有一个程序在运行，后面的程序需要等待前面的程序执行完成后才能开始执行，而前面的程序有时会由于I/O操作、网络等原因阻塞，所以批处理操作效率也不高。</p><ul><li>进程的提出</li></ul><p>人们对于计算机的性能要求越来越高，现有的批处理操作系统并不能满足人们的需求，而批处理操作系统的瓶颈在于内存中只存在一个程序，那么内存中能不能存在多个程序呢？这是人们亟待解决的问题。</p><p>于是，科学家们提出了<strong>进程</strong>的概念。</p><p><strong>进程就是应用程序在内存中分配的空间，也就是正在运行的程序，各个进程之间互不干扰。同时进程保存着程序每一个时刻运行的状态</strong>。</p><p>此时，CPU采用时间片轮转的方式运行进程：CPU为每个进程分配一个时间段，称作它的时间片。如果在时间片结束时进程还在运行，则暂停这个进程的运行，并且CPU分配给另一个进程（这个过程叫做上下文切换）。如果进程在时间片结束前阻塞或结束，则CPU立即进行切换，不用等待时间片用完。当进程暂停时，它会保存当前进程的状态（进程标识，进程使用的资源等），在下一次切换回来时根据之前保存的状态进行恢复，接着继续执行。</p><p>使用进程+CPU时间片轮转方式的操作系统，在宏观上看起来同一时间段执行多个任务，换句话说，<strong>进程让操作体统的并发成为了可能</strong>。虽然并发从宏观上看有多个任务在执行，但在事实上，对于单核CPU来说，任意具体时刻都只有一个任务在占用CPU资源。</p><p>虽然进程的出现，使得操作系统的性能大大提升，但是随着时间的推移，人们并不满足一个进程在一段时间只能做一件事情，如果一个进程有多个子任务时，只能逐个得执行这些子任务，很影响效率，此时<strong>线程</strong>出现了。</p><h5 id="线程的提出"><a href="#线程的提出" class="headerlink" title="线程的提出"></a>线程的提出</h5><p>那么能不能让这些子任务同时执行呢？<strong>于是科学家们又提出了线程的概念，让一个线程执行一个子任务，这样一个进程就包含了多个线程，每个线程负责一个单独的子任务。</strong></p><p>总之，进程和线程的提出极大的提高了操作提供的性能。<strong>进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能。</strong></p><p><strong>多进程的方式也可以实现并发，为什么我们要使用多线程？</strong></p><p>多进程方式确实可以实现并发，但使用多线程，有以下几个好处：<br>    - 进程间的通信比较复杂，而线程间的通信比较简单，通常情况下，我们需要使用共享资源，这些资源在线程间的通信比较容易。<br>    - 进程是重量级的，而线程是轻量级的，故多线程方式的系统开销更小。</p><h5 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h5><p><strong>进程是一个独立的运行环境，而线程是在进程中执行的一个任务</strong>。他们两个本质的区别是是否单独占有内存地址空间及其它系统资源（比如I/O）：</p><ul><li><p>进程单独占有一定的内存地址空间，所以进程间存在内存隔离，数据是分开的，数据共享复杂但是同步简单，各个进程之间互不干扰；而线程共享所属进程占有的内存地址空间和资源，数据共享简单，但是同步复杂。</p></li><li><p>进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高；一个线程崩溃可能影响整个程序的稳定性，可靠性较低。</p></li><li><p>进程单独占有一定的内存地址空间，进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小。</p></li><li><p>另外一个重要区别是，进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位，即CPU分配时间的单位 。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java多线程进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java，多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
